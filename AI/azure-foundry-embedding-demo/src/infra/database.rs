use anyhow::Result;
use sqlx::SqlitePool;
use sqlx::sqlite::SqlitePoolOptions;
use std::path::Path;

/// Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÌíÄ ÏÉùÏÑ±
pub async fn create_pool(database_url: &str) -> Result<SqlitePool> {
    // SQLite ÌååÏùº Í≤ΩÎ°ú Ï∂îÏ∂ú Î∞è ÎîîÎ†âÌÑ∞Î¶¨ ÏÉùÏÑ±
    let final_url = if let Some(file_path) = database_url.strip_prefix("sqlite://").or_else(|| database_url.strip_prefix("sqlite:")) {
        let path = Path::new(file_path);

        // Ï†àÎåÄ Í≤ΩÎ°úÎ°ú Î≥ÄÌôò Î∞è Ï†ïÍ∑úÌôî
        let abs_path = if path.is_absolute() {
            path.to_path_buf()
        } else {
            std::env::current_dir()?.join(path)
        };

        // Í≤ΩÎ°ú Ï†ïÍ∑úÌôî (canonicalizeÎäî ÌååÏùºÏù¥ Ï°¥Ïû¨Ìï¥Ïïº ÌïòÎØÄÎ°ú ÏàòÎèôÏúºÎ°ú Ï≤òÎ¶¨)
        let normalized = abs_path.components().fold(std::path::PathBuf::new(), |mut acc, component| {
            match component {
                | std::path::Component::CurDir => {},
                | _ => acc.push(component),
            }
            acc
        });

        // Î∂ÄÎ™® ÎîîÎ†âÌÑ∞Î¶¨Í∞Ä ÏûàÏúºÎ©¥ ÏÉùÏÑ±
        if let Some(parent) = normalized.parent() {
            std::fs::create_dir_all(parent)?;
            println!("üìÅ ÎîîÎ†âÌÑ∞Î¶¨ ÏÉùÏÑ±: {:?}", parent);
        }

        // Ï†àÎåÄ Í≤ΩÎ°úÎ°ú URL Ïû¨Íµ¨ÏÑ± (WindowsÏóêÏÑúÎäî Ïä¨ÎûòÏãúÎ°ú Î≥ÄÌôò)
        let path_str = normalized.to_string_lossy().replace('\\', "/");
        // mode=rwc: ÏùΩÍ∏∞/Ïì∞Í∏∞ Î™®Îìú, ÌååÏùºÏù¥ ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
        format!("sqlite://{}?mode=rwc", path_str)
    } else {
        database_url.to_string()
    };

    println!("üîó Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ URL: {}", final_url);

    let pool = SqlitePoolOptions::new().max_connections(5).connect(&final_url).await?;

    Ok(pool)
}

/// Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî (ÌÖåÏù¥Î∏î ÏÉùÏÑ±)
pub async fn initialize_database(pool: &SqlitePool) -> Result<()> {
    sqlx::query(
        r#"
        CREATE TABLE IF NOT EXISTS embeddings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            text TEXT NOT NULL,
            vector BLOB NOT NULL,
            created_at TEXT NOT NULL
        )
        "#,
    )
    .execute(pool)
    .await?;

    Ok(())
}

/// ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
pub async fn seed_sample_data(pool: &SqlitePool, samples: Vec<(String, Vec<f32>)>) -> Result<()> {
    // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
    let count: (i64,) = sqlx::query_as("SELECT COUNT(*) FROM embeddings").fetch_one(pool).await?;

    if count.0 > 0 {
        println!("ÏÉòÌîå Îç∞Ïù¥ÌÑ∞Í∞Ä Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§. Í±¥ÎÑàÎúÅÎãàÎã§.");
        return Ok(());
    }

    // ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ
    for (text, vector) in samples {
        let vector_bytes = vector_to_bytes(&vector);
        let created_at = chrono::Utc::now().to_rfc3339();

        sqlx::query(
            r#"
            INSERT INTO embeddings (text, vector, created_at)
            VALUES (?, ?, ?)
            "#,
        )
        .bind(text)
        .bind(vector_bytes)
        .bind(created_at)
        .execute(pool)
        .await?;
    }

    println!("ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± ÏôÑÎ£å");
    Ok(())
}

/// Î≤°ÌÑ∞Î•º Î∞îÏù¥Ìä∏Î°ú Î≥ÄÌôò
pub fn vector_to_bytes(vector: &[f32]) -> Vec<u8> { vector.iter().flat_map(|&f| f.to_le_bytes()).collect() }

/// Î∞îÏù¥Ìä∏Î•º Î≤°ÌÑ∞Î°ú Î≥ÄÌôò
pub fn bytes_to_vector(bytes: &[u8]) -> Vec<f32> {
    bytes
        .chunks_exact(4)
        .map(|chunk| f32::from_le_bytes([chunk[0], chunk[1], chunk[2], chunk[3]]))
        .collect()
}
